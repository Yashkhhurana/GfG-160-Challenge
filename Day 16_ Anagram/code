 // Check if lengths are equal  
    if (s1.size() != s2.size()) {  
        return false;  
    }  

    // Frequency array for characters ('a' to 'z')  
    std::vector<int> frequency(26, 0);  
    
    // Count frequency of each character in both strings  
    for (char ch : s1) {  
        frequency[ch - 'a']++;  
    }  
    
    for (char ch : s2) {  
        frequency[ch - 'a']--;  
    }  

    // Check if all counts are zero  
    for (int count : frequency) {  
        if (count != 0) {  
            return false;  
        }  
    }  
    
    return true;



















// Check if the lengths of the strings are different  
    if (s1.size() != s2.size()) {  
        return false;  
    }  
    
    // Create a frequency map for the characters in s1  
    std::unordered_map<char, int> charCount;  
    
    for (char c : s1) {  
        charCount[c]++;  
    }  
    
    // Decrease the frequency count based on characters in s2  
    for (char c : s2) {  
        charCount[c]--;  
        if (charCount[c] < 0) {  
            return false; // Found a character in s2 that is not in s1  
        }  
    }  
    
    return true; // All counts should be zero if s1 and s2 are anagrams  
