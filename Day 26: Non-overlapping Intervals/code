// If there are no intervals, return 0  
    if (intervals.empty()) return 0;  
    
    // Step 1: Sort the intervals based on the end time  
    sort(intervals.begin(), intervals.end(), [](const vector<int>& a, const vector<int>& b) {  
        return a[1] < b[1]; // Sort by the end time of the interval  
    });  
    
    // Step 2: Initialize variables  
    int count = 0; // Count how many intervals we need to remove  
    int end = intervals[0][1]; // Keep track of the end of the last added interval  
    
    // Step 3: Iterate through the intervals  
    for (int i = 1; i < intervals.size(); ++i) {  
        // If the current interval starts before the end of the last added interval, we have an overlap  
        if (intervals[i][0] < end) {  
            count++; // We need to remove one interval  
        } else {  
            // Otherwise, update the end to the end of the current interval  
            end = intervals[i][1];  
        }  
    }  
    
    return count; // Return the count of intervals to remove  
