class Solution {
  public:
    void nextPermutation(vector<int>& arr) {
        // code here
        int n = arr.size();  
    
    // Step 1: Find the largest index k such that arr[k] < arr[k + 1].   
    // If no such index exists, the permutation is the last permutation.  
    int k = -1;  
    for (int i = n - 2; i >= 0; i--) {  
        if (arr[i] < arr[i + 1]) {  
            k = i;  
            break;  
        }  
    }  

    // Step 2: If no such index exists, reverse the array to the lowest order.  
    if (k == -1) {  
           reverse(arr.begin(), arr.end());  
        return;  
    }  

    // Step 3: Find the largest index l greater than k such that arr[k] < arr[l]  
    int l = -1;  
    for (int i = n - 1; i > k; i--) {  
        if (arr[k] < arr[i]) {  
            l = i;  
            break;  
        }  
    }  

    // Step 4: Swap the value of arr[k] with that of arr[l]  
   swap(arr[k], arr[l]);  

    // Step 5: Reverse the sequence from arr[k + 1] up to and including the final element arr[n - 1]  
    reverse(arr.begin() + k + 1, arr.end());  
}  
        
    
};



// Another Approach
 void nextPermutation(vector<int>& nums) {
        int n = nums.size();
        
        int i = n-1;
        for(; i>0; i--) {
            if(nums[i] > nums[i-1]) {
                break;
            }
        }
        if(i != 0) {
            int index = i;
            for(int j = n-1; j>=i; j--) {
                if(nums[j] > nums[i-1]) {
                    index = j;
                    break;
                }
            }
            swap(nums[i-1], nums[index]);
        }
        reverse(nums.begin()+i, nums.end());
    }
