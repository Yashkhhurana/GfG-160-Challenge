//1st Approach
vector<int> findMajority(vector<int>& arr) {
        // Your code goes here.
    
    int n = arr.size();  
    if (n == 0) return {};  

    int candidate1 = 0, candidate2 = 0, count1 = 0, count2 = 0;  

    // First pass: find potential candidates  
    for (int num : arr) {  
        if (num == candidate1) {  
            count1++;  
        } else if (num == candidate2) {  
            count2++;  
        } else if (count1 == 0) {  
            candidate1 = num;  
            count1 = 1;  
        } else if (count2 == 0) {  
            candidate2 = num;  
            count2 = 1;  
        } else {  
            count1--;  
            count2--;  
        }  
    }  

    // Second pass: count the occurrences of the candidates  
    count1 = count2 = 0;  
    for (int num : arr) {  
        if (num == candidate1) count1++;  
        else if (num == candidate2) count2++;  
    }  

    vector<int> result;  
    if (count1 > n / 3) result.push_back(candidate1);  
    if (count2 > n / 3) result.push_back(candidate2);  

    // Sort the result before returning  
    sort(result.begin(), result.end());  
    return result;  
    }

















// or using unordered map
unordered_map<int, int> voteCount;  
    int n = arr.size();  
    int threshold = n / 3;  

    // Count votes for each candidate  
    for (int num : arr) {  
        voteCount[num]++;  
    }  

    vector<int> result;  

    // Check which candidates have votes greater than one-third of total votes  
    for (const auto& entry : voteCount) {  
        if (entry.second > threshold) {  
            result.push_back(entry.first);  
        }  
    }  

    // Sort the result in increasing order  
    sort(result.begin(), result.end());  

    return result;  
